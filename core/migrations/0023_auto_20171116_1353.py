# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2017-11-20 20:56
from __future__ import unicode_literals

import core.helpers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_historicaltag'),
        ('core', '0022_librarysampledetail_lims_vial_barcode'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalPbalLibrary',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_history_library',
                'verbose_name': 'historical pbal library',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPbalSequencing',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='Dual Index (i7 and i5)', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read2 length')),
                ('sequencing_goal', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencing goal (# lanes)')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='H2500', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'pbal_history_sequencing',
                'verbose_name': 'historical pbal sequencing',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTenxLibrary',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('jira_ticket', models.CharField(max_length=50, null=True, verbose_name='Jira ticket')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_library',
                'verbose_name': 'historical tenx library',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTenxSequencing',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='Dual Index (i7 and i5)', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read2 length')),
                ('sequencing_goal', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencing goal (# lanes)')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='H2500', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'db_table': 'tenx_history_sequencing',
                'verbose_name': 'historical tenx sequencing',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='PbalLane',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='PbalLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('projects', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of project names.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Project')),
                ('relates_to', models.ManyToManyField(blank=True, null=True, to='core.Library', verbose_name='Relates to')),
            ],
            options={
                'ordering': ['sample'],
            },
            bases=(models.Model, core.helpers.FieldValue, core.helpers.LibraryAssistant),
        ),
        migrations.CreateModel(
            name='PbalLibraryConstructionInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(blank=True, default='384-well plate', max_length=50, null=True, verbose_name='Format')),
                ('library_construction_method', models.CharField(blank=True, default='pbal', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='methylome', max_length=50, null=True, verbose_name='Library type')),
                ('library_prep_date', models.DateField(blank=True, null=True, verbose_name='Library prep date')),
                ('library_prep_location', models.CharField(blank=True, default='Hirst Lab', max_length=50, null=True, verbose_name='Library prep location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.PbalLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='PbalLibraryQuantificationAndStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.PbalLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='PbalLibrarySampleDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('sample_spot_date', models.DateField(blank=True, null=True, verbose_name='Sample spot date')),
                ('spotting_location', models.CharField(blank=True, choices=[('A', 'Aparicio Lab'), ('H', 'Hansen Lab'), ('G', 'GSC'), ('T', 'TFL flow facility')], max_length=50, null=True, verbose_name='Spotting location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.PbalLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='PbalSequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='Dual Index (i7 and i5)', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read2 length')),
                ('sequencing_goal', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencing goal (# lanes)')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='H2500', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PbalLibrary', verbose_name='Library')),
                ('relates_to', models.ManyToManyField(blank=True, null=True, related_name='_pbalsequencing_relates_to_+', to='core.PbalSequencing', verbose_name='Relates to')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='PbalSequencingDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC library ID')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(blank=True, default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('sequencing', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.PbalSequencing', verbose_name='Sequencing')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jira_ticket', models.CharField(max_length=50, verbose_name='Jira ticket')),
                ('plate_status', models.CharField(blank=True, choices=[('submitted', 'submitted'), ('sequenced', 'sequenced'), ('stored', 'stored')], max_length=50, null=True, verbose_name='Plate status')),
                ('plate_location', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Plate location')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PbalLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLane',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flow_cell_id', models.CharField(max_length=50, verbose_name='Flow cell/Lane ID')),
                ('path_to_archive', models.CharField(blank=True, max_length=150, null=True, verbose_name='Path to archive')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jira_ticket', models.CharField(max_length=50, null=True, verbose_name='Jira ticket')),
                ('num_sublibraries', models.IntegerField(blank=True, default=0, null=True, verbose_name='Number of sublibraries')),
                ('description', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Description')),
                ('result', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Result')),
                ('projects', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of project names.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Project')),
                ('relates_to', models.ManyToManyField(blank=True, null=True, to='core.Library', verbose_name='Relates to')),
            ],
            options={
                'ordering': ['sample'],
            },
            bases=(models.Model, core.helpers.FieldValue, core.helpers.LibraryAssistant),
        ),
        migrations.CreateModel(
            name='TenxLibraryConstructionInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library_construction_method', models.CharField(blank=True, default='10X Genomics', max_length=50, null=True, verbose_name='Library construction method')),
                ('library_type', models.CharField(blank=True, default='transciptome', max_length=50, null=True, verbose_name='Library type')),
                ('library_prep_date', models.DateField(blank=True, null=True, verbose_name='Library prep date')),
                ('library_prep_location', models.CharField(blank=True, default='UBC-BRC', max_length=50, null=True, verbose_name='Library prep location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.TenxLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLibraryQuantificationAndStorage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qc_check', models.CharField(blank=True, choices=[('P', 'Will sequence'), ('N', 'Will not sequence')], max_length=50, null=True, verbose_name='QC check')),
                ('qc_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='QC notes')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.TenxLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxLibrarySampleDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_state', models.CharField(blank=True, choices=[('C', 'Cells'), ('N', 'Nuclei'), ('M', 'Mixed'), ('U', 'Unknown')], max_length=50, null=True, verbose_name='Cell state')),
                ('estimated_percent_viability', models.IntegerField(blank=True, null=True, verbose_name='Estimated percent viability')),
                ('label_of_original_sample_vial', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label of original sample vial')),
                ('lims_vial_barcode', models.CharField(blank=True, max_length=50, null=True, verbose_name='LIMS vial barcode')),
                ('original_storage_temperature', models.IntegerField(blank=True, null=True, verbose_name='Original storage temperature (C)')),
                ('passage_of_cell_line', models.IntegerField(blank=True, null=True, verbose_name='Passage')),
                ('sample_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample notes')),
                ('sample_preparation_method', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sample preparation method')),
                ('sample_preservation_method', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sample preservation method')),
                ('sample_prep_date', models.DateField(blank=True, null=True, verbose_name='Sample prep date')),
                ('sorting_location', models.CharField(blank=True, default='TFL flow facility', max_length=50, null=True, verbose_name='Sorting location')),
                ('library', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.TenxLibrary', verbose_name='Library')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxSequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adapter', models.CharField(blank=True, default='CTGTCTCTTATACACATCT', max_length=50, null=True, verbose_name='Adapter')),
                ('format_for_data_submission', models.CharField(blank=True, default='fastq', max_length=50, null=True, verbose_name='Format for data dissemination')),
                ('index_read_type', models.CharField(blank=True, default='Dual Index (i7 and i5)', max_length=50, null=True, verbose_name='Index read type')),
                ('index_read1_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read1 length')),
                ('index_read2_length', models.IntegerField(blank=True, default=6, null=True, verbose_name='Index read2 length')),
                ('read_type', models.CharField(blank=True, choices=[('P', 'PET'), ('S', 'SET')], default='P', max_length=50, null=True, verbose_name='Read type')),
                ('read1_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read1 length')),
                ('read2_length', models.IntegerField(blank=True, default=125, null=True, verbose_name='Read2 length')),
                ('sequencing_goal', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencing goal (# lanes)')),
                ('sequencing_instrument', models.CharField(blank=True, choices=[('HX', 'HiSeqX'), ('H2500', 'HiSeq2500'), ('N550', 'NextSeq550'), ('MI', 'MiSeq'), ('O', 'other')], default='H2500', max_length=50, null=True, verbose_name='Sequencing instrument')),
                ('sequencing_output_mode', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=50, null=True, verbose_name='Sequencing output mode')),
                ('short_description_of_submission', models.CharField(blank=True, max_length=150, null=True, verbose_name='Short description of submission')),
                ('submission_date', models.DateField(blank=True, null=True, verbose_name='Submission date')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.TenxLibrary', verbose_name='Library')),
                ('relates_to', models.ManyToManyField(blank=True, null=True, related_name='_tenxsequencing_relates_to_+', to='core.TenxSequencing', verbose_name='Relates to')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.CreateModel(
            name='TenxSequencingDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gsc_library_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='GSC library ID')),
                ('sequencer_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='Sequencer ID')),
                ('sequencing_center', models.CharField(blank=True, default='BCCAGSC', max_length=50, null=True, verbose_name='Sequencing center')),
                ('sequencer_notes', models.TextField(blank=True, max_length=5000, null=True, verbose_name='Sequencing notes')),
                ('sequencing', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.TenxSequencing', verbose_name='Sequencing')),
            ],
            bases=(models.Model, core.helpers.FieldValue),
        ),
        migrations.AlterModelOptions(
            name='sample',
            options={'ordering': ['sample_id']},
        ),
        migrations.AddField(
            model_name='tenxlibrary',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Sample', verbose_name='Primary Sample'),
        ),
        migrations.AddField(
            model_name='tenxlane',
            name='sequencing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.TenxSequencing', verbose_name='Sequencing'),
        ),
        migrations.AddField(
            model_name='pballibrary',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Sample', verbose_name='Primary Sample'),
        ),
        migrations.AddField(
            model_name='pballane',
            name='sequencing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.PbalSequencing', verbose_name='Sequencing'),
        ),
        migrations.AddField(
            model_name='historicaltenxsequencing',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.TenxLibrary'),
        ),
        migrations.AddField(
            model_name='historicaltenxlibrary',
            name='sample',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample'),
        ),
        migrations.AddField(
            model_name='historicalpbalsequencing',
            name='library',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.PbalLibrary'),
        ),
        migrations.AddField(
            model_name='historicalpballibrary',
            name='sample',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Sample'),
        ),
    ]
